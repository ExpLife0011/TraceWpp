{"name":"Tracewpp","tagline":"High-performance tracing for C++ Windows/Windows Phone Store apps","body":"The [Windows trace PreProcessor](http://msdn.microsoft.com/en-us/library/windows/hardware/ff556204(v=vs.85).aspx) (WPP) provides high-performance tracing for C++ apps. It has low impact on binary size and CPU usage -- even when tracing is turned on -- which makes it suitable for both Debug and Release builds. It is however difficult to set up, especially in Universal Windows/Windows Phone Store apps. This project tries to address that issue.\r\n\r\n## Initial setup\r\n\r\nStart by installing the [WPP Tracing NuGet package](https://www.nuget.org/packages/MMaitre.TraceWpp/). The package adds a header to the VS project (TraceWpp\\TraceWpp.h) and an MSBuild target generating .tmh trace headers during the build. Also install the [WDK](http://msdn.microsoft.com/en-us/windows/hardware/hh852365.aspx) to get required WPP config files.\r\n\r\nIf using GIT, add '*.tmh' to .gitignore to avoid checking-in generated headers.\r\n\r\nThen create a GUID to identify the trace provider via the 'Tools > Create GUID' menu in Visual Studio. In the following {B5DBB673-AB73-48A3-B004-B8902FA191C3} is used as provider GUID.\r\n\r\nIn the pch.h precompiled header define the trace provider:\r\n\r\n```cpp\r\n// {B5DBB673-AB73-48A3-B004-B8902FA191C3}\r\n#define TraceWpp_Guid (B5DBB673,AB73,48A3,B004,B8902FA191C3)\r\n\r\n#define WPP_CONTROL_GUIDS \\\r\n    WPP_DEFINE_CONTROL_GUID(TraceWpp_CtrlGuid, TraceWpp_Guid, \\\r\n    WPP_DEFINE_BIT(TF_Default) \\\r\n    WPP_DEFINE_BIT(TF_EntryExit))\r\n\r\n#include \"TraceWpp\\TraceWpp.h\"\r\n```\r\n\r\nTraceWpp.h defines a set of tracing macros:\r\n\r\n- Trace\r\n- TraceFlag\r\n- TraceLevel\r\n- TraceHr\r\n- TraceScope\r\n- TraceScopeCx\r\n- TraceScopeHr\r\n\r\nThe first four provide printf-style traces with various parameters. The last three trace function calls.\r\n\r\nIn each cpp file add as last include the trace header generated by the preprocessor. Its filename is the cpp file name with a '.tmh' extension appended to it.\r\n\r\n```cpp\r\n#include \"TraceWpp\\foo.cpp.tmh\"   \r\n```\r\n\r\nWhen creating a Store app, add the following code to initialize and shut down the trace provider (replacing 'AppName' with some appropriate value):\r\n\r\n```cpp\r\nApp::App()\r\n{\r\n    WPP_INIT_TRACING(L\"AppName\");\r\n    Trace(L\"@%p Starting\", (void*)this);\r\n}\r\n\r\nvoid App::OnSuspending(Object^ /*sender*/, SuspendingEventArgs^ /*e*/)\r\n{\r\n    Trace(L\"@%p Stopping\", (void*)this);\r\n    WPP_CLEANUP();\r\n}\r\n```\r\n\r\nWhen creating a Windows Runtime Component DLL, add a file called module.cpp to the VS project with the following content (replacing 'DllName' with some appropriate value):\r\n\r\n```cpp\r\n#include \"pch.h\"\r\n#include \"TraceWpp\\module.cpp.tmh\"\r\n\r\nBOOL WINAPI DllMain(HINSTANCE instance, DWORD reason, LPVOID reserved)\r\n{\r\n    switch (reason)\r\n    {\r\n    case DLL_PROCESS_ATTACH:\r\n        DisableThreadLibraryCalls(instance);\r\n        WPP_INIT_TRACING(L\"DllName\");\r\n        Trace(L\"@ DLL_PROCESS_ATTACH\");\r\n        break;\r\n\r\n    case DLL_PROCESS_DETACH:\r\n        Trace(L\"@ DLL_PROCESS_DETACH\");\r\n        WPP_CLEANUP();\r\n        break;\r\n    }\r\n\r\n    return TRUE;\r\n}\r\n```\r\n\r\nIn VS projects targetting Windows, add advapi32.lib as imported static lib under 'Configuration Properties > Linker > Input > Additional Dependencies'. In Windows Phone VS projects the required static libs are already properly imported.\r\n\r\nDisable 'Edit and Continue' used in Debug builds as this breaks WPP trace macro generation: under 'Configuration Properties > C/C++ > General > Debug Information Format' replace 'Program Database for Edit And Continue (/ZI)' by 'Program Database (/Zi)'.\r\n\r\n## Adding traces\r\n\r\nTrace macros use format strings similar to printf():\r\n\r\n```cpp\r\nTrace(L\"@%p Starting\", this);\r\n```\r\n\r\nOne caveat: for C++/CX objects the ```this``` pointer needs to be cast to ```void*``` in trace calls.\r\n\r\n## Recording traces\r\n\r\n### Windows\r\n\r\nThe logman.exe tool under %windir%\\system32 turns trace providers on and off. To start tracing run the following command in an elevated command prompt:\r\n\r\n```\r\nlogman.exe create trace mytrace -p {B5DBB673-AB73-48A3-B004-B8902FA191C3} 0xff 5 -ets -o trace.etl\r\n```\r\n\r\nReplacing the '-p' option by '-pf' allows controlling more than one provider. The list of providers is stored in a config file with one set of 'GUID flags level' per line.\r\n\r\nTo stop tracing run\r\n\r\n```\r\nlogman.exe stop mytrace -ets\r\n```\r\n\r\n### Windows Phone\r\n\r\n[Field Medic](http://www.windowsphone.com/en-us/store/app/field-medic/73c58570-d5a7-46f8-b1b2-2a90024fc29c) records traces on Windows Phone. For more details see this [blog](http://mmaitre314.github.io/2014/12/01/field-medic-custom-logging.html). A WPRP profile controlling the trace provider defined above is available [here](http://mmaitre314.github.io/download/TraceWpp.wprp).\r\n\r\n## Formatting traces\r\n\r\nOnce recorded, traces need to be converted from binary trace files (.etl) to text files (.log). The process is the same whether traces were recorded on Windows or Windows Phone.\r\n\r\nTwo tools are needed from the Windows SDK: tracepdb.exe and tracefmt.exe. They are located in '%ProgramFiles%\\Windows Kits\\8.1\\bin\\x86' on 32b machines and in '%ProgramFiles(x86)%\\Windows Kits\\8.1\\bin\\x64' on 64b machines.\r\n\r\nFirst extract .tmf trace format files from .pdb symbol files:\r\n\r\n```\r\ntracepdb.exe -f *.pdb -p c:\\Symbols\\TraceFormat\r\n```\r\n\r\nThen format the .etl binary traces into text traces:\r\n\r\n```\r\nset TRACE_FORMAT_SEARCH_PATH=c:\\Symbols\\TraceFormat\r\nset TRACE_FORMAT_PREFIX=[%9!d!]%8!04X!.%3!04X! %4!s! %!FUNC!\r\ntracefmt.exe -f trace.etl -o trace.log\r\n```\r\n\r\nThe TRACE_FORMAT_PREFIX environment variable can be customized using the format specifiers documented [here](http://msdn.microsoft.com/en-us/library/windows/hardware/ff553941(v=vs.85).aspx). The format used above is '[CpuNumber]ProcessID.ThreadID Time FunctionName'.\r\n\r\n## Analysing traces\r\n\r\n[TextAnalysisTool.NET](http://dlaa.me/blog/post/3450647) can quickly filter and color traces using string patterns. See this [blog](http://blogs.msdn.com/b/mf/archive/2010/09/09/analyzing-media-foundation-traces.aspx) for more details.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}